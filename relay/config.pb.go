// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: relayer/provers/lcp/config/config.proto

package relay

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ProverConfig struct {
	OriginProver *types.Any `protobuf:"bytes,1,opt,name=origin_prover,json=originProver,proto3" json:"origin_prover,omitempty"`
	// hex string
	LcpServiceAddress string `protobuf:"bytes,2,opt,name=lcp_service_address,json=lcpServiceAddress,proto3" json:"lcp_service_address,omitempty"`
	// unit: seconds
	LcpServiceDialTimeout uint64 `protobuf:"varint,3,opt,name=lcp_service_dial_timeout,json=lcpServiceDialTimeout,proto3" json:"lcp_service_dial_timeout,omitempty"`
	// hex string
	Mrenclave            string   `protobuf:"bytes,4,opt,name=mrenclave,proto3" json:"mrenclave,omitempty"`
	AllowedQuoteStatuses []string `protobuf:"bytes,5,rep,name=allowed_quote_statuses,json=allowedQuoteStatuses,proto3" json:"allowed_quote_statuses,omitempty"`
	AllowedAdvisoryIds   []string `protobuf:"bytes,6,rep,name=allowed_advisory_ids,json=allowedAdvisoryIds,proto3" json:"allowed_advisory_ids,omitempty"`
	// unit: seconds
	KeyExpiration               uint64 `protobuf:"varint,7,opt,name=key_expiration,json=keyExpiration,proto3" json:"key_expiration,omitempty"`
	ElcClientId                 string `protobuf:"bytes,8,opt,name=elc_client_id,json=elcClientId,proto3" json:"elc_client_id,omitempty"`
	MessageAggregation          bool   `protobuf:"varint,9,opt,name=message_aggregation,json=messageAggregation,proto3" json:"message_aggregation,omitempty"`
	MessageAggregationBatchSize uint64 `protobuf:"varint,10,opt,name=message_aggregation_batch_size,json=messageAggregationBatchSize,proto3" json:"message_aggregation_batch_size,omitempty"`
	IsDebugEnclave              bool   `protobuf:"varint,11,opt,name=is_debug_enclave,json=isDebugEnclave,proto3" json:"is_debug_enclave,omitempty"`
	// if empty, any operator is allowed (default)
	// otherwise, only operators in this list are allowed
	Operators []string `protobuf:"bytes,12,rep,name=operators,proto3" json:"operators,omitempty"`
	// this only works when operators is not empty
	// the value must be less than or equal to 1
	OperatorsThreshold Fraction `protobuf:"bytes,13,opt,name=operators_threshold,json=operatorsThreshold,proto3" json:"operators_threshold"`
	// TODO use signer module instead
	// hex string
	OperatorPrivateKey string `protobuf:"bytes,14,opt,name=operator_private_key,json=operatorPrivateKey,proto3" json:"operator_private_key,omitempty"`
	// Types that are valid to be assigned to OperatorsEip712Salt:
	//	*ProverConfig_EvmChainEip712Salt
	//	*ProverConfig_CosmosChainEip712Salt
	OperatorsEip712Salt isProverConfig_OperatorsEip712Salt `protobuf_oneof:"operators_eip712_salt"`
}

func (m *ProverConfig) Reset()         { *m = ProverConfig{} }
func (m *ProverConfig) String() string { return proto.CompactTextString(m) }
func (*ProverConfig) ProtoMessage()    {}
func (*ProverConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e6956e1b8ef896e, []int{0}
}
func (m *ProverConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProverConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProverConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProverConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProverConfig.Merge(m, src)
}
func (m *ProverConfig) XXX_Size() int {
	return m.Size()
}
func (m *ProverConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ProverConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ProverConfig proto.InternalMessageInfo

type isProverConfig_OperatorsEip712Salt interface {
	isProverConfig_OperatorsEip712Salt()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ProverConfig_EvmChainEip712Salt struct {
	EvmChainEip712Salt *EVMChainSalt `protobuf:"bytes,31,opt,name=evm_chain_eip712_salt,json=evmChainEip712Salt,proto3,oneof" json:"evm_chain_eip712_salt,omitempty"`
}
type ProverConfig_CosmosChainEip712Salt struct {
	CosmosChainEip712Salt *CosmosChainSalt `protobuf:"bytes,32,opt,name=cosmos_chain_eip712_salt,json=cosmosChainEip712Salt,proto3,oneof" json:"cosmos_chain_eip712_salt,omitempty"`
}

func (*ProverConfig_EvmChainEip712Salt) isProverConfig_OperatorsEip712Salt()    {}
func (*ProverConfig_CosmosChainEip712Salt) isProverConfig_OperatorsEip712Salt() {}

func (m *ProverConfig) GetOperatorsEip712Salt() isProverConfig_OperatorsEip712Salt {
	if m != nil {
		return m.OperatorsEip712Salt
	}
	return nil
}

func (m *ProverConfig) GetEvmChainEip712Salt() *EVMChainSalt {
	if x, ok := m.GetOperatorsEip712Salt().(*ProverConfig_EvmChainEip712Salt); ok {
		return x.EvmChainEip712Salt
	}
	return nil
}

func (m *ProverConfig) GetCosmosChainEip712Salt() *CosmosChainSalt {
	if x, ok := m.GetOperatorsEip712Salt().(*ProverConfig_CosmosChainEip712Salt); ok {
		return x.CosmosChainEip712Salt
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ProverConfig) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ProverConfig_EvmChainEip712Salt)(nil),
		(*ProverConfig_CosmosChainEip712Salt)(nil),
	}
}

type Fraction struct {
	Numerator   uint64 `protobuf:"varint,1,opt,name=numerator,proto3" json:"numerator,omitempty"`
	Denominator uint64 `protobuf:"varint,2,opt,name=denominator,proto3" json:"denominator,omitempty"`
}

func (m *Fraction) Reset()         { *m = Fraction{} }
func (m *Fraction) String() string { return proto.CompactTextString(m) }
func (*Fraction) ProtoMessage()    {}
func (*Fraction) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e6956e1b8ef896e, []int{1}
}
func (m *Fraction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Fraction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Fraction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Fraction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Fraction.Merge(m, src)
}
func (m *Fraction) XXX_Size() int {
	return m.Size()
}
func (m *Fraction) XXX_DiscardUnknown() {
	xxx_messageInfo_Fraction.DiscardUnknown(m)
}

var xxx_messageInfo_Fraction proto.InternalMessageInfo

type EVMChainSalt struct {
	ChainId                  uint64 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	VerifyingContractAddress string `protobuf:"bytes,2,opt,name=verifying_contract_address,json=verifyingContractAddress,proto3" json:"verifying_contract_address,omitempty"`
}

func (m *EVMChainSalt) Reset()         { *m = EVMChainSalt{} }
func (m *EVMChainSalt) String() string { return proto.CompactTextString(m) }
func (*EVMChainSalt) ProtoMessage()    {}
func (*EVMChainSalt) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e6956e1b8ef896e, []int{2}
}
func (m *EVMChainSalt) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EVMChainSalt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EVMChainSalt.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EVMChainSalt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EVMChainSalt.Merge(m, src)
}
func (m *EVMChainSalt) XXX_Size() int {
	return m.Size()
}
func (m *EVMChainSalt) XXX_DiscardUnknown() {
	xxx_messageInfo_EVMChainSalt.DiscardUnknown(m)
}

var xxx_messageInfo_EVMChainSalt proto.InternalMessageInfo

type CosmosChainSalt struct {
	ChainId string `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Prefix  string `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
}

func (m *CosmosChainSalt) Reset()         { *m = CosmosChainSalt{} }
func (m *CosmosChainSalt) String() string { return proto.CompactTextString(m) }
func (*CosmosChainSalt) ProtoMessage()    {}
func (*CosmosChainSalt) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e6956e1b8ef896e, []int{3}
}
func (m *CosmosChainSalt) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CosmosChainSalt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CosmosChainSalt.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CosmosChainSalt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CosmosChainSalt.Merge(m, src)
}
func (m *CosmosChainSalt) XXX_Size() int {
	return m.Size()
}
func (m *CosmosChainSalt) XXX_DiscardUnknown() {
	xxx_messageInfo_CosmosChainSalt.DiscardUnknown(m)
}

var xxx_messageInfo_CosmosChainSalt proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ProverConfig)(nil), "relayer.provers.lcp.config.ProverConfig")
	proto.RegisterType((*Fraction)(nil), "relayer.provers.lcp.config.Fraction")
	proto.RegisterType((*EVMChainSalt)(nil), "relayer.provers.lcp.config.EVMChainSalt")
	proto.RegisterType((*CosmosChainSalt)(nil), "relayer.provers.lcp.config.CosmosChainSalt")
}

func init() {
	proto.RegisterFile("relayer/provers/lcp/config/config.proto", fileDescriptor_2e6956e1b8ef896e)
}

var fileDescriptor_2e6956e1b8ef896e = []byte{
	// 753 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x54, 0x5d, 0x8f, 0xdb, 0x44,
	0x14, 0x8d, 0xdb, 0x65, 0x77, 0x33, 0xfb, 0x01, 0xcc, 0x6e, 0xca, 0x34, 0x54, 0x6e, 0x14, 0x15,
	0x11, 0x09, 0x61, 0x43, 0x41, 0xaa, 0x90, 0x78, 0x49, 0xb2, 0x41, 0x2c, 0x08, 0xa9, 0x38, 0x15,
	0x0f, 0x20, 0x34, 0x9a, 0x8c, 0x6f, 0x9c, 0xd1, 0x8e, 0x3d, 0x66, 0x66, 0x62, 0xea, 0xfe, 0x0a,
	0x7e, 0x0a, 0x3f, 0x63, 0x1f, 0xfb, 0xc8, 0x13, 0x82, 0xdd, 0x3f, 0x82, 0x3c, 0x76, 0xe2, 0xa8,
	0x2d, 0x7d, 0x4a, 0xee, 0x39, 0xe7, 0x9e, 0x73, 0x7d, 0xc7, 0x63, 0xf4, 0xb1, 0x06, 0xc9, 0x4a,
	0xd0, 0x61, 0xae, 0x55, 0x01, 0xda, 0x84, 0x92, 0xe7, 0x21, 0x57, 0xd9, 0x52, 0x24, 0xcd, 0x4f,
	0x90, 0x6b, 0x65, 0x15, 0xee, 0x37, 0xc2, 0xa0, 0x11, 0x06, 0x92, 0xe7, 0x41, 0xad, 0xe8, 0x9f,
	0x27, 0x2a, 0x51, 0x4e, 0x16, 0x56, 0xff, 0xea, 0x8e, 0xfe, 0xfd, 0x44, 0xa9, 0x44, 0x42, 0xe8,
	0xaa, 0xc5, 0x7a, 0x19, 0xb2, 0xac, 0xac, 0xa9, 0xe1, 0x9f, 0x07, 0xe8, 0xf8, 0xa9, 0xf3, 0x99,
	0x3a, 0x07, 0xfc, 0x15, 0x3a, 0x51, 0x5a, 0x24, 0x22, 0xa3, 0xb5, 0x3d, 0xf1, 0x06, 0xde, 0xe8,
	0xe8, 0xf1, 0x79, 0x50, 0x7b, 0x04, 0x1b, 0x8f, 0x60, 0x9c, 0x95, 0xd1, 0x71, 0x2d, 0xad, 0x0d,
	0x70, 0x80, 0xce, 0x24, 0xcf, 0xa9, 0x01, 0x5d, 0x08, 0x0e, 0x94, 0xc5, 0xb1, 0x06, 0x63, 0xc8,
	0x9d, 0x81, 0x37, 0xea, 0x46, 0xef, 0x4b, 0x9e, 0xcf, 0x6b, 0x66, 0x5c, 0x13, 0xf8, 0x09, 0x22,
	0xbb, 0xfa, 0x58, 0x30, 0x49, 0xad, 0x48, 0x41, 0xad, 0x2d, 0xb9, 0x3b, 0xf0, 0x46, 0x7b, 0x51,
	0xaf, 0x6d, 0xba, 0x10, 0x4c, 0x3e, 0xab, 0x49, 0xfc, 0x00, 0x75, 0x53, 0x0d, 0x19, 0x97, 0xac,
	0x00, 0xb2, 0xe7, 0xec, 0x5b, 0x00, 0x7f, 0x89, 0xee, 0x31, 0x29, 0xd5, 0xef, 0x10, 0xd3, 0xdf,
	0xd6, 0xca, 0x02, 0x35, 0x96, 0xd9, 0xb5, 0x01, 0x43, 0xde, 0x19, 0xdc, 0x1d, 0x75, 0xa3, 0xf3,
	0x86, 0xfd, 0xb1, 0x22, 0xe7, 0x0d, 0x87, 0x3f, 0x43, 0x1b, 0x9c, 0xb2, 0xb8, 0x10, 0x46, 0xe9,
	0x92, 0x8a, 0xd8, 0x90, 0x7d, 0xd7, 0x83, 0x1b, 0x6e, 0xdc, 0x50, 0x97, 0xb1, 0xc1, 0x1f, 0xa1,
	0xd3, 0x2b, 0x28, 0x29, 0x3c, 0xcf, 0x85, 0x66, 0x56, 0xa8, 0x8c, 0x1c, 0xb8, 0xa1, 0x4f, 0xae,
	0xa0, 0x9c, 0x6d, 0x41, 0x3c, 0x44, 0x27, 0x20, 0x39, 0xe5, 0x52, 0x40, 0x66, 0xa9, 0x88, 0xc9,
	0xa1, 0x1b, 0xf8, 0x08, 0x24, 0x9f, 0x3a, 0xec, 0x32, 0xc6, 0x21, 0x3a, 0x4b, 0xc1, 0x18, 0x96,
	0x00, 0x65, 0x49, 0xa2, 0x21, 0xa9, 0xfd, 0xba, 0x03, 0x6f, 0x74, 0x18, 0xe1, 0x86, 0x1a, 0xb7,
	0x0c, 0x9e, 0x22, 0xff, 0x0d, 0x0d, 0x74, 0xc1, 0x2c, 0x5f, 0x51, 0x23, 0x5e, 0x00, 0x41, 0x6e,
	0x96, 0x0f, 0x5f, 0xef, 0x9d, 0x54, 0x9a, 0xb9, 0x78, 0x01, 0x78, 0x84, 0xde, 0x13, 0x86, 0xc6,
	0xb0, 0x58, 0x27, 0x74, 0xb3, 0xcd, 0x23, 0x17, 0x79, 0x2a, 0xcc, 0x45, 0x05, 0xcf, 0x9a, 0x95,
	0x3e, 0x40, 0x5d, 0x95, 0x83, 0x66, 0x56, 0x69, 0x43, 0x8e, 0xdd, 0x46, 0x5a, 0x00, 0xff, 0x82,
	0xce, 0xb6, 0x05, 0xb5, 0x2b, 0x0d, 0x66, 0xa5, 0x64, 0x4c, 0x4e, 0xdc, 0x8b, 0xf3, 0x28, 0xf8,
	0xff, 0xd7, 0x35, 0xf8, 0x46, 0x33, 0xee, 0x66, 0xda, 0xbb, 0xfe, 0xfb, 0x61, 0x27, 0xc2, 0x5b,
	0x9b, 0x67, 0x1b, 0x97, 0xea, 0x5c, 0x36, 0x28, 0xcd, 0xb5, 0x28, 0x98, 0x05, 0x7a, 0x05, 0x25,
	0x39, 0x75, 0x5b, 0xdc, 0x76, 0x3c, 0xad, 0xa9, 0xef, 0xa1, 0xc4, 0xbf, 0xa2, 0x1e, 0x14, 0x29,
	0xe5, 0x2b, 0x26, 0x32, 0x0a, 0x22, 0x7f, 0xf2, 0xf9, 0x63, 0x6a, 0x98, 0xb4, 0xe4, 0xa1, 0x1b,
	0x68, 0xf4, 0xb6, 0x81, 0x66, 0x3f, 0xfd, 0x30, 0xad, 0xfa, 0xe6, 0x4c, 0xda, 0x6f, 0x3b, 0x11,
	0x86, 0x22, 0x75, 0xf5, 0xcc, 0xd9, 0x54, 0x28, 0x5e, 0x22, 0xc2, 0x95, 0x49, 0x95, 0x79, 0x43,
	0xc2, 0xc0, 0x25, 0x7c, 0xf2, 0xb6, 0x84, 0xa9, 0xeb, 0xdd, 0x0d, 0xe9, 0xf1, 0x16, 0x6a, 0x73,
	0x26, 0x1f, 0xa0, 0x5e, 0xbb, 0xd5, 0x9d, 0x90, 0xe1, 0x77, 0xe8, 0x70, 0xb3, 0xb7, 0xea, 0x60,
	0xb2, 0x75, 0x5a, 0xab, 0xdc, 0x4d, 0xdd, 0x8b, 0x5a, 0x00, 0x0f, 0xd0, 0x51, 0x0c, 0x99, 0x4a,
	0x45, 0xe6, 0xf8, 0x3b, 0x8e, 0xdf, 0x85, 0x86, 0x09, 0x3a, 0xde, 0x7d, 0x64, 0x7c, 0x1f, 0x1d,
	0xd6, 0x4f, 0x25, 0xe2, 0xc6, 0xee, 0xc0, 0xd5, 0x97, 0x31, 0xfe, 0x1a, 0xf5, 0x0b, 0xd0, 0x62,
	0x59, 0x8a, 0x2c, 0xa1, 0x5c, 0x65, 0xb6, 0x9a, 0xe1, 0x95, 0x4b, 0x4e, 0xb6, 0x8a, 0x69, 0x23,
	0x68, 0xee, 0xfa, 0xf0, 0x02, 0xbd, 0xfb, 0xca, 0x93, 0xbf, 0x96, 0xd5, 0x6d, 0xb3, 0xee, 0xa1,
	0xfd, 0x5c, 0xc3, 0x52, 0x3c, 0x6f, 0x7c, 0x9b, 0x6a, 0x32, 0xb9, 0xfe, 0xd7, 0xef, 0x5c, 0xdf,
	0xf8, 0xde, 0xcb, 0x1b, 0xdf, 0xfb, 0xe7, 0xc6, 0xf7, 0xfe, 0xb8, 0xf5, 0x3b, 0x2f, 0x6f, 0xfd,
	0xce, 0x5f, 0xb7, 0x7e, 0xe7, 0xe7, 0x47, 0x89, 0xb0, 0xab, 0xf5, 0x22, 0xe0, 0x2a, 0x0d, 0x63,
	0x66, 0x99, 0x73, 0x93, 0x6c, 0x51, 0x7d, 0x49, 0x3f, 0x4d, 0x54, 0xe8, 0x4e, 0x65, 0xb1, 0xef,
	0xbe, 0x60, 0x5f, 0xfc, 0x17, 0x00, 0x00, 0xff, 0xff, 0xe7, 0xde, 0xd1, 0x3c, 0x70, 0x05, 0x00,
	0x00,
}

func (m *ProverConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProverConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProverConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OperatorsEip712Salt != nil {
		{
			size := m.OperatorsEip712Salt.Size()
			i -= size
			if _, err := m.OperatorsEip712Salt.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.OperatorPrivateKey) > 0 {
		i -= len(m.OperatorPrivateKey)
		copy(dAtA[i:], m.OperatorPrivateKey)
		i = encodeVarintConfig(dAtA, i, uint64(len(m.OperatorPrivateKey)))
		i--
		dAtA[i] = 0x72
	}
	{
		size, err := m.OperatorsThreshold.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintConfig(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x6a
	if len(m.Operators) > 0 {
		for iNdEx := len(m.Operators) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Operators[iNdEx])
			copy(dAtA[i:], m.Operators[iNdEx])
			i = encodeVarintConfig(dAtA, i, uint64(len(m.Operators[iNdEx])))
			i--
			dAtA[i] = 0x62
		}
	}
	if m.IsDebugEnclave {
		i--
		if m.IsDebugEnclave {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if m.MessageAggregationBatchSize != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.MessageAggregationBatchSize))
		i--
		dAtA[i] = 0x50
	}
	if m.MessageAggregation {
		i--
		if m.MessageAggregation {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if len(m.ElcClientId) > 0 {
		i -= len(m.ElcClientId)
		copy(dAtA[i:], m.ElcClientId)
		i = encodeVarintConfig(dAtA, i, uint64(len(m.ElcClientId)))
		i--
		dAtA[i] = 0x42
	}
	if m.KeyExpiration != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.KeyExpiration))
		i--
		dAtA[i] = 0x38
	}
	if len(m.AllowedAdvisoryIds) > 0 {
		for iNdEx := len(m.AllowedAdvisoryIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AllowedAdvisoryIds[iNdEx])
			copy(dAtA[i:], m.AllowedAdvisoryIds[iNdEx])
			i = encodeVarintConfig(dAtA, i, uint64(len(m.AllowedAdvisoryIds[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.AllowedQuoteStatuses) > 0 {
		for iNdEx := len(m.AllowedQuoteStatuses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AllowedQuoteStatuses[iNdEx])
			copy(dAtA[i:], m.AllowedQuoteStatuses[iNdEx])
			i = encodeVarintConfig(dAtA, i, uint64(len(m.AllowedQuoteStatuses[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Mrenclave) > 0 {
		i -= len(m.Mrenclave)
		copy(dAtA[i:], m.Mrenclave)
		i = encodeVarintConfig(dAtA, i, uint64(len(m.Mrenclave)))
		i--
		dAtA[i] = 0x22
	}
	if m.LcpServiceDialTimeout != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.LcpServiceDialTimeout))
		i--
		dAtA[i] = 0x18
	}
	if len(m.LcpServiceAddress) > 0 {
		i -= len(m.LcpServiceAddress)
		copy(dAtA[i:], m.LcpServiceAddress)
		i = encodeVarintConfig(dAtA, i, uint64(len(m.LcpServiceAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.OriginProver != nil {
		{
			size, err := m.OriginProver.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProverConfig_EvmChainEip712Salt) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProverConfig_EvmChainEip712Salt) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EvmChainEip712Salt != nil {
		{
			size, err := m.EvmChainEip712Salt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}
func (m *ProverConfig_CosmosChainEip712Salt) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProverConfig_CosmosChainEip712Salt) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CosmosChainEip712Salt != nil {
		{
			size, err := m.CosmosChainEip712Salt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *Fraction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Fraction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Fraction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Denominator != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.Denominator))
		i--
		dAtA[i] = 0x10
	}
	if m.Numerator != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.Numerator))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EVMChainSalt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EVMChainSalt) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EVMChainSalt) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VerifyingContractAddress) > 0 {
		i -= len(m.VerifyingContractAddress)
		copy(dAtA[i:], m.VerifyingContractAddress)
		i = encodeVarintConfig(dAtA, i, uint64(len(m.VerifyingContractAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.ChainId != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CosmosChainSalt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CosmosChainSalt) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CosmosChainSalt) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Prefix) > 0 {
		i -= len(m.Prefix)
		copy(dAtA[i:], m.Prefix)
		i = encodeVarintConfig(dAtA, i, uint64(len(m.Prefix)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintConfig(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintConfig(dAtA []byte, offset int, v uint64) int {
	offset -= sovConfig(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ProverConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OriginProver != nil {
		l = m.OriginProver.Size()
		n += 1 + l + sovConfig(uint64(l))
	}
	l = len(m.LcpServiceAddress)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.LcpServiceDialTimeout != 0 {
		n += 1 + sovConfig(uint64(m.LcpServiceDialTimeout))
	}
	l = len(m.Mrenclave)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	if len(m.AllowedQuoteStatuses) > 0 {
		for _, s := range m.AllowedQuoteStatuses {
			l = len(s)
			n += 1 + l + sovConfig(uint64(l))
		}
	}
	if len(m.AllowedAdvisoryIds) > 0 {
		for _, s := range m.AllowedAdvisoryIds {
			l = len(s)
			n += 1 + l + sovConfig(uint64(l))
		}
	}
	if m.KeyExpiration != 0 {
		n += 1 + sovConfig(uint64(m.KeyExpiration))
	}
	l = len(m.ElcClientId)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.MessageAggregation {
		n += 2
	}
	if m.MessageAggregationBatchSize != 0 {
		n += 1 + sovConfig(uint64(m.MessageAggregationBatchSize))
	}
	if m.IsDebugEnclave {
		n += 2
	}
	if len(m.Operators) > 0 {
		for _, s := range m.Operators {
			l = len(s)
			n += 1 + l + sovConfig(uint64(l))
		}
	}
	l = m.OperatorsThreshold.Size()
	n += 1 + l + sovConfig(uint64(l))
	l = len(m.OperatorPrivateKey)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.OperatorsEip712Salt != nil {
		n += m.OperatorsEip712Salt.Size()
	}
	return n
}

func (m *ProverConfig_EvmChainEip712Salt) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EvmChainEip712Salt != nil {
		l = m.EvmChainEip712Salt.Size()
		n += 2 + l + sovConfig(uint64(l))
	}
	return n
}
func (m *ProverConfig_CosmosChainEip712Salt) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CosmosChainEip712Salt != nil {
		l = m.CosmosChainEip712Salt.Size()
		n += 2 + l + sovConfig(uint64(l))
	}
	return n
}
func (m *Fraction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Numerator != 0 {
		n += 1 + sovConfig(uint64(m.Numerator))
	}
	if m.Denominator != 0 {
		n += 1 + sovConfig(uint64(m.Denominator))
	}
	return n
}

func (m *EVMChainSalt) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovConfig(uint64(m.ChainId))
	}
	l = len(m.VerifyingContractAddress)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	return n
}

func (m *CosmosChainSalt) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	l = len(m.Prefix)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	return n
}

func sovConfig(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozConfig(x uint64) (n int) {
	return sovConfig(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ProverConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProverConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProverConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginProver", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OriginProver == nil {
				m.OriginProver = &types.Any{}
			}
			if err := m.OriginProver.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LcpServiceAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LcpServiceAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LcpServiceDialTimeout", wireType)
			}
			m.LcpServiceDialTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LcpServiceDialTimeout |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mrenclave", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mrenclave = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedQuoteStatuses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllowedQuoteStatuses = append(m.AllowedQuoteStatuses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedAdvisoryIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllowedAdvisoryIds = append(m.AllowedAdvisoryIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyExpiration", wireType)
			}
			m.KeyExpiration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyExpiration |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ElcClientId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ElcClientId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageAggregation", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MessageAggregation = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageAggregationBatchSize", wireType)
			}
			m.MessageAggregationBatchSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageAggregationBatchSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDebugEnclave", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDebugEnclave = bool(v != 0)
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operators", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operators = append(m.Operators, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorsThreshold", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OperatorsThreshold.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorPrivateKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorPrivateKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvmChainEip712Salt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EVMChainSalt{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OperatorsEip712Salt = &ProverConfig_EvmChainEip712Salt{v}
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CosmosChainEip712Salt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CosmosChainSalt{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OperatorsEip712Salt = &ProverConfig_CosmosChainEip712Salt{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Fraction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Fraction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Fraction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Numerator", wireType)
			}
			m.Numerator = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Numerator |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denominator", wireType)
			}
			m.Denominator = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Denominator |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EVMChainSalt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EVMChainSalt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EVMChainSalt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerifyingContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VerifyingContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CosmosChainSalt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CosmosChainSalt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CosmosChainSalt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipConfig(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthConfig
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupConfig
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthConfig
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthConfig        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowConfig          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupConfig = fmt.Errorf("proto: unexpected end of group")
)
