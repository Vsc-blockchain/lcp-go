// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ibc/lightclients/lcp/v1/lcp.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	types "github.com/cosmos/ibc-go/v8/modules/core/02-client/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type UpdateClientMessage struct {
	ProxyMessage []byte   `protobuf:"bytes,1,opt,name=proxy_message,json=proxyMessage,proto3" json:"proxy_message,omitempty"`
	Signatures   [][]byte `protobuf:"bytes,2,rep,name=signatures,proto3" json:"signatures,omitempty"`
}

func (m *UpdateClientMessage) Reset()         { *m = UpdateClientMessage{} }
func (m *UpdateClientMessage) String() string { return proto.CompactTextString(m) }
func (*UpdateClientMessage) ProtoMessage()    {}
func (*UpdateClientMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_69f4c398e914fe8d, []int{0}
}
func (m *UpdateClientMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateClientMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateClientMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateClientMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateClientMessage.Merge(m, src)
}
func (m *UpdateClientMessage) XXX_Size() int {
	return m.Size()
}
func (m *UpdateClientMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateClientMessage.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateClientMessage proto.InternalMessageInfo

type RegisterEnclaveKeyMessage struct {
	Report            string `protobuf:"bytes,1,opt,name=report,proto3" json:"report,omitempty"`
	Signature         []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	SigningCert       []byte `protobuf:"bytes,3,opt,name=signing_cert,json=signingCert,proto3" json:"signing_cert,omitempty"`
	OperatorSignature []byte `protobuf:"bytes,4,opt,name=operator_signature,json=operatorSignature,proto3" json:"operator_signature,omitempty"`
}

func (m *RegisterEnclaveKeyMessage) Reset()         { *m = RegisterEnclaveKeyMessage{} }
func (m *RegisterEnclaveKeyMessage) String() string { return proto.CompactTextString(m) }
func (*RegisterEnclaveKeyMessage) ProtoMessage()    {}
func (*RegisterEnclaveKeyMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_69f4c398e914fe8d, []int{1}
}
func (m *RegisterEnclaveKeyMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterEnclaveKeyMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterEnclaveKeyMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterEnclaveKeyMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterEnclaveKeyMessage.Merge(m, src)
}
func (m *RegisterEnclaveKeyMessage) XXX_Size() int {
	return m.Size()
}
func (m *RegisterEnclaveKeyMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterEnclaveKeyMessage.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterEnclaveKeyMessage proto.InternalMessageInfo

type UpdateOperatorsMessage struct {
	Nonce                            uint64   `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
	NewOperators                     [][]byte `protobuf:"bytes,2,rep,name=new_operators,json=newOperators,proto3" json:"new_operators,omitempty"`
	NewOperatorsThresholdNumerator   uint64   `protobuf:"varint,3,opt,name=new_operators_threshold_numerator,json=newOperatorsThresholdNumerator,proto3" json:"new_operators_threshold_numerator,omitempty"`
	NewOperatorsThresholdDenominator uint64   `protobuf:"varint,4,opt,name=new_operators_threshold_denominator,json=newOperatorsThresholdDenominator,proto3" json:"new_operators_threshold_denominator,omitempty"`
	Signatures                       [][]byte `protobuf:"bytes,5,rep,name=signatures,proto3" json:"signatures,omitempty"`
}

func (m *UpdateOperatorsMessage) Reset()         { *m = UpdateOperatorsMessage{} }
func (m *UpdateOperatorsMessage) String() string { return proto.CompactTextString(m) }
func (*UpdateOperatorsMessage) ProtoMessage()    {}
func (*UpdateOperatorsMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_69f4c398e914fe8d, []int{2}
}
func (m *UpdateOperatorsMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateOperatorsMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateOperatorsMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateOperatorsMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateOperatorsMessage.Merge(m, src)
}
func (m *UpdateOperatorsMessage) XXX_Size() int {
	return m.Size()
}
func (m *UpdateOperatorsMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateOperatorsMessage.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateOperatorsMessage proto.InternalMessageInfo

type ClientState struct {
	Mrenclave     []byte       `protobuf:"bytes,1,opt,name=mrenclave,proto3" json:"mrenclave,omitempty"`
	KeyExpiration uint64       `protobuf:"varint,2,opt,name=key_expiration,json=keyExpiration,proto3" json:"key_expiration,omitempty"`
	Frozen        bool         `protobuf:"varint,3,opt,name=frozen,proto3" json:"frozen,omitempty"`
	LatestHeight  types.Height `protobuf:"bytes,4,opt,name=latest_height,json=latestHeight,proto3" json:"latest_height"`
	// e.g. SW_HARDENING_NEEDED, CONFIGURATION_AND_SW_HARDENING_NEEDED (except "OK")
	AllowedQuoteStatuses []string `protobuf:"bytes,5,rep,name=allowed_quote_statuses,json=allowedQuoteStatuses,proto3" json:"allowed_quote_statuses,omitempty"`
	// e.g. INTEL-SA-XXXXX
	AllowedAdvisoryIds            []string `protobuf:"bytes,6,rep,name=allowed_advisory_ids,json=allowedAdvisoryIds,proto3" json:"allowed_advisory_ids,omitempty"`
	Operators                     [][]byte `protobuf:"bytes,7,rep,name=operators,proto3" json:"operators,omitempty"`
	OperatorsNonce                uint64   `protobuf:"varint,8,opt,name=operators_nonce,json=operatorsNonce,proto3" json:"operators_nonce,omitempty"`
	OperatorsThresholdNumerator   uint64   `protobuf:"varint,9,opt,name=operators_threshold_numerator,json=operatorsThresholdNumerator,proto3" json:"operators_threshold_numerator,omitempty"`
	OperatorsThresholdDenominator uint64   `protobuf:"varint,10,opt,name=operators_threshold_denominator,json=operatorsThresholdDenominator,proto3" json:"operators_threshold_denominator,omitempty"`
}

func (m *ClientState) Reset()         { *m = ClientState{} }
func (m *ClientState) String() string { return proto.CompactTextString(m) }
func (*ClientState) ProtoMessage()    {}
func (*ClientState) Descriptor() ([]byte, []int) {
	return fileDescriptor_69f4c398e914fe8d, []int{3}
}
func (m *ClientState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientState.Merge(m, src)
}
func (m *ClientState) XXX_Size() int {
	return m.Size()
}
func (m *ClientState) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientState.DiscardUnknown(m)
}

var xxx_messageInfo_ClientState proto.InternalMessageInfo

type ConsensusState struct {
	StateId []byte `protobuf:"bytes,1,opt,name=state_id,json=stateId,proto3" json:"state_id,omitempty"`
	// unix timestamp in seconds
	Timestamp uint64 `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (m *ConsensusState) Reset()         { *m = ConsensusState{} }
func (m *ConsensusState) String() string { return proto.CompactTextString(m) }
func (*ConsensusState) ProtoMessage()    {}
func (*ConsensusState) Descriptor() ([]byte, []int) {
	return fileDescriptor_69f4c398e914fe8d, []int{4}
}
func (m *ConsensusState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsensusState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConsensusState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConsensusState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsensusState.Merge(m, src)
}
func (m *ConsensusState) XXX_Size() int {
	return m.Size()
}
func (m *ConsensusState) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsensusState.DiscardUnknown(m)
}

var xxx_messageInfo_ConsensusState proto.InternalMessageInfo

func init() {
	proto.RegisterType((*UpdateClientMessage)(nil), "ibc.lightclients.lcp.v1.UpdateClientMessage")
	proto.RegisterType((*RegisterEnclaveKeyMessage)(nil), "ibc.lightclients.lcp.v1.RegisterEnclaveKeyMessage")
	proto.RegisterType((*UpdateOperatorsMessage)(nil), "ibc.lightclients.lcp.v1.UpdateOperatorsMessage")
	proto.RegisterType((*ClientState)(nil), "ibc.lightclients.lcp.v1.ClientState")
	proto.RegisterType((*ConsensusState)(nil), "ibc.lightclients.lcp.v1.ConsensusState")
}

func init() { proto.RegisterFile("ibc/lightclients/lcp/v1/lcp.proto", fileDescriptor_69f4c398e914fe8d) }

var fileDescriptor_69f4c398e914fe8d = []byte{
	// 673 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x54, 0xcd, 0x52, 0x13, 0x4d,
	0x14, 0x4d, 0x20, 0xfc, 0xa4, 0x09, 0x7c, 0xf5, 0xb5, 0x14, 0x06, 0x94, 0x01, 0x42, 0x59, 0xb2,
	0x61, 0x22, 0x6a, 0xb9, 0x17, 0xc4, 0x32, 0x65, 0x81, 0xe5, 0x80, 0x1b, 0x36, 0x53, 0x9d, 0x99,
	0xeb, 0xa4, 0x8b, 0x99, 0xee, 0xb1, 0xbb, 0x13, 0x88, 0xef, 0x60, 0x95, 0xef, 0xe0, 0xcb, 0xb0,
	0x64, 0xe9, 0xca, 0x52, 0xd8, 0xfa, 0x10, 0x56, 0xff, 0x4c, 0x26, 0xfe, 0xe1, 0x2a, 0xd3, 0xe7,
	0x9e, 0x7b, 0xd2, 0xf7, 0x9e, 0x53, 0x8d, 0x36, 0x68, 0x37, 0x6a, 0xa7, 0x34, 0xe9, 0xa9, 0x28,
	0xa5, 0xc0, 0x94, 0x6c, 0xa7, 0x51, 0xde, 0x1e, 0xec, 0xe8, 0x1f, 0x3f, 0x17, 0x5c, 0x71, 0x7c,
	0x9b, 0x76, 0x23, 0x7f, 0x9c, 0xe2, 0xeb, 0xda, 0x60, 0x67, 0x65, 0x31, 0xe1, 0x09, 0x37, 0x9c,
	0xb6, 0xfe, 0xb2, 0xf4, 0x95, 0x35, 0xad, 0x18, 0x71, 0x01, 0x6d, 0x4b, 0xd7, 0x62, 0xf6, 0xcb,
	0x12, 0x5a, 0x27, 0xe8, 0xd6, 0x9b, 0x3c, 0x26, 0x0a, 0xf6, 0x0c, 0x7a, 0x00, 0x52, 0x92, 0x04,
	0xf0, 0x26, 0x9a, 0xcf, 0x05, 0x3f, 0x1f, 0x86, 0x99, 0x05, 0x9a, 0xd5, 0xf5, 0xea, 0x56, 0x23,
	0x68, 0x18, 0xb0, 0x20, 0x79, 0x08, 0x49, 0x9a, 0x30, 0xa2, 0xfa, 0x02, 0x64, 0x73, 0x62, 0x7d,
	0x72, 0xab, 0x11, 0x8c, 0x21, 0xad, 0x4f, 0x55, 0xb4, 0x1c, 0x40, 0x42, 0xa5, 0x02, 0xb1, 0xcf,
	0xa2, 0x94, 0x0c, 0xe0, 0x25, 0x8c, 0xba, 0x97, 0xd0, 0xb4, 0x80, 0x9c, 0x0b, 0x65, 0xb4, 0xeb,
	0x81, 0x3b, 0xe1, 0xbb, 0xa8, 0x3e, 0xd2, 0x68, 0x4e, 0x98, 0xbf, 0x2d, 0x01, 0xbc, 0x81, 0x1a,
	0xfa, 0x40, 0x59, 0x12, 0x46, 0x20, 0x54, 0x73, 0xd2, 0x10, 0xe6, 0x1c, 0xb6, 0x07, 0x42, 0xe1,
	0x6d, 0x84, 0x79, 0x0e, 0x82, 0x28, 0x2e, 0xc2, 0x52, 0xa9, 0x66, 0x88, 0xff, 0x17, 0x95, 0xa3,
	0xa2, 0xd0, 0xfa, 0x30, 0x81, 0x96, 0xec, 0x0a, 0x5e, 0xb9, 0x9a, 0x2c, 0xae, 0xb8, 0x88, 0xa6,
	0x18, 0x67, 0x91, 0x9d, 0xbe, 0x16, 0xd8, 0x83, 0xde, 0x0d, 0x83, 0xb3, 0xb0, 0x50, 0x2a, 0x26,
	0x6f, 0x30, 0x38, 0x1b, 0x29, 0xe0, 0x0e, 0xda, 0xf8, 0x89, 0x14, 0xaa, 0x9e, 0x00, 0xd9, 0xe3,
	0x69, 0x1c, 0xb2, 0x7e, 0x66, 0x41, 0x73, 0xf9, 0x5a, 0xe0, 0x8d, 0x37, 0x1e, 0x17, 0xb4, 0xc3,
	0x82, 0x85, 0x0f, 0xd0, 0xe6, 0xdf, 0xa4, 0x62, 0x60, 0x3c, 0xa3, 0xcc, 0x88, 0xd5, 0x8c, 0xd8,
	0xfa, 0x1f, 0xc5, 0x9e, 0x95, 0xbc, 0x5f, 0x5c, 0x9b, 0xfa, 0xcd, 0xb5, 0xef, 0x93, 0x68, 0xce,
	0x86, 0xe1, 0x48, 0x11, 0x05, 0xda, 0x8f, 0x4c, 0x80, 0xb5, 0xcf, 0xc5, 0xa0, 0x04, 0xf0, 0x3d,
	0xb4, 0x70, 0x0a, 0xc3, 0x10, 0xce, 0x73, 0x2a, 0x88, 0xa2, 0x9c, 0x19, 0xcb, 0x6a, 0xc1, 0xfc,
	0x29, 0x0c, 0xf7, 0x47, 0xa0, 0x36, 0xfb, 0xad, 0xe0, 0xef, 0x81, 0x99, 0x99, 0x67, 0x03, 0x77,
	0xc2, 0xfb, 0x68, 0x3e, 0x25, 0x0a, 0xa4, 0x0a, 0x7b, 0xa0, 0x43, 0x6d, 0xa6, 0x98, 0x7b, 0xb8,
	0xe2, 0xeb, 0x98, 0xeb, 0xdc, 0xfa, 0x2e, 0xad, 0x83, 0x1d, 0xff, 0x85, 0x61, 0xec, 0xd6, 0x2e,
	0xbe, 0xac, 0x55, 0x82, 0x86, 0x6d, 0xb3, 0x18, 0x7e, 0x8c, 0x96, 0x48, 0x9a, 0xf2, 0x33, 0x88,
	0xc3, 0x77, 0x7d, 0xae, 0x20, 0x94, 0x8a, 0xa8, 0xbe, 0x74, 0xf3, 0xd5, 0x83, 0x45, 0x57, 0x7d,
	0xad, 0x8b, 0x47, 0xae, 0x86, 0x1f, 0xa0, 0x02, 0x0f, 0x49, 0x3c, 0xa0, 0x92, 0x8b, 0x61, 0x48,
	0x63, 0xd9, 0x9c, 0x36, 0x3d, 0xd8, 0xd5, 0x9e, 0xba, 0x52, 0x27, 0x96, 0x7a, 0x17, 0xa5, 0xed,
	0x33, 0x66, 0x75, 0x25, 0x80, 0xef, 0xa3, 0xff, 0x4a, 0x93, 0x6c, 0x70, 0x66, 0xcd, 0x32, 0x16,
	0x46, 0xf0, 0xa1, 0x49, 0xd0, 0x2e, 0x5a, 0xbd, 0x39, 0x18, 0x75, 0xd3, 0x76, 0x87, 0xdf, 0x90,
	0x8a, 0xe7, 0x68, 0xed, 0x5f, 0x89, 0x40, 0x46, 0x65, 0x95, 0xdf, 0x14, 0x87, 0x56, 0x07, 0x2d,
	0xec, 0x71, 0x26, 0x81, 0xc9, 0xbe, 0xb4, 0x86, 0x2f, 0xa3, 0x59, 0xbd, 0x3e, 0x08, 0x69, 0xec,
	0xfc, 0x9e, 0x31, 0xe7, 0x4e, 0xac, 0xe7, 0x57, 0x34, 0x03, 0xa9, 0x48, 0x96, 0x3b, 0xa3, 0x4b,
	0x60, 0xf7, 0xf8, 0xe2, 0x9b, 0x57, 0xb9, 0xb8, 0xf2, 0xaa, 0x97, 0x57, 0x5e, 0xf5, 0xeb, 0x95,
	0x57, 0xfd, 0x78, 0xed, 0x55, 0x2e, 0xaf, 0xbd, 0xca, 0xe7, 0x6b, 0xaf, 0x72, 0xf2, 0x24, 0xa1,
	0xaa, 0xd7, 0xef, 0xfa, 0x11, 0xcf, 0xda, 0x31, 0x51, 0x24, 0xea, 0x11, 0xca, 0x52, 0xd2, 0xd5,
	0x8f, 0xdb, 0x76, 0xc2, 0xed, 0xbb, 0xb7, 0x3d, 0xfe, 0xf0, 0xa9, 0x61, 0x0e, 0xb2, 0x3b, 0x6d,
	0x1e, 0xaa, 0x47, 0x3f, 0x02, 0x00, 0x00, 0xff, 0xff, 0xdd, 0x93, 0x8f, 0x19, 0x1d, 0x05, 0x00,
	0x00,
}

func (m *UpdateClientMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateClientMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateClientMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signatures) > 0 {
		for iNdEx := len(m.Signatures) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Signatures[iNdEx])
			copy(dAtA[i:], m.Signatures[iNdEx])
			i = encodeVarintLcp(dAtA, i, uint64(len(m.Signatures[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ProxyMessage) > 0 {
		i -= len(m.ProxyMessage)
		copy(dAtA[i:], m.ProxyMessage)
		i = encodeVarintLcp(dAtA, i, uint64(len(m.ProxyMessage)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RegisterEnclaveKeyMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterEnclaveKeyMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterEnclaveKeyMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OperatorSignature) > 0 {
		i -= len(m.OperatorSignature)
		copy(dAtA[i:], m.OperatorSignature)
		i = encodeVarintLcp(dAtA, i, uint64(len(m.OperatorSignature)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SigningCert) > 0 {
		i -= len(m.SigningCert)
		copy(dAtA[i:], m.SigningCert)
		i = encodeVarintLcp(dAtA, i, uint64(len(m.SigningCert)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintLcp(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Report) > 0 {
		i -= len(m.Report)
		copy(dAtA[i:], m.Report)
		i = encodeVarintLcp(dAtA, i, uint64(len(m.Report)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateOperatorsMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateOperatorsMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateOperatorsMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signatures) > 0 {
		for iNdEx := len(m.Signatures) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Signatures[iNdEx])
			copy(dAtA[i:], m.Signatures[iNdEx])
			i = encodeVarintLcp(dAtA, i, uint64(len(m.Signatures[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.NewOperatorsThresholdDenominator != 0 {
		i = encodeVarintLcp(dAtA, i, uint64(m.NewOperatorsThresholdDenominator))
		i--
		dAtA[i] = 0x20
	}
	if m.NewOperatorsThresholdNumerator != 0 {
		i = encodeVarintLcp(dAtA, i, uint64(m.NewOperatorsThresholdNumerator))
		i--
		dAtA[i] = 0x18
	}
	if len(m.NewOperators) > 0 {
		for iNdEx := len(m.NewOperators) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.NewOperators[iNdEx])
			copy(dAtA[i:], m.NewOperators[iNdEx])
			i = encodeVarintLcp(dAtA, i, uint64(len(m.NewOperators[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Nonce != 0 {
		i = encodeVarintLcp(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ClientState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OperatorsThresholdDenominator != 0 {
		i = encodeVarintLcp(dAtA, i, uint64(m.OperatorsThresholdDenominator))
		i--
		dAtA[i] = 0x50
	}
	if m.OperatorsThresholdNumerator != 0 {
		i = encodeVarintLcp(dAtA, i, uint64(m.OperatorsThresholdNumerator))
		i--
		dAtA[i] = 0x48
	}
	if m.OperatorsNonce != 0 {
		i = encodeVarintLcp(dAtA, i, uint64(m.OperatorsNonce))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Operators) > 0 {
		for iNdEx := len(m.Operators) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Operators[iNdEx])
			copy(dAtA[i:], m.Operators[iNdEx])
			i = encodeVarintLcp(dAtA, i, uint64(len(m.Operators[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.AllowedAdvisoryIds) > 0 {
		for iNdEx := len(m.AllowedAdvisoryIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AllowedAdvisoryIds[iNdEx])
			copy(dAtA[i:], m.AllowedAdvisoryIds[iNdEx])
			i = encodeVarintLcp(dAtA, i, uint64(len(m.AllowedAdvisoryIds[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.AllowedQuoteStatuses) > 0 {
		for iNdEx := len(m.AllowedQuoteStatuses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AllowedQuoteStatuses[iNdEx])
			copy(dAtA[i:], m.AllowedQuoteStatuses[iNdEx])
			i = encodeVarintLcp(dAtA, i, uint64(len(m.AllowedQuoteStatuses[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	{
		size, err := m.LatestHeight.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLcp(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.Frozen {
		i--
		if m.Frozen {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.KeyExpiration != 0 {
		i = encodeVarintLcp(dAtA, i, uint64(m.KeyExpiration))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Mrenclave) > 0 {
		i -= len(m.Mrenclave)
		copy(dAtA[i:], m.Mrenclave)
		i = encodeVarintLcp(dAtA, i, uint64(len(m.Mrenclave)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConsensusState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsensusState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConsensusState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Timestamp != 0 {
		i = encodeVarintLcp(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x10
	}
	if len(m.StateId) > 0 {
		i -= len(m.StateId)
		copy(dAtA[i:], m.StateId)
		i = encodeVarintLcp(dAtA, i, uint64(len(m.StateId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintLcp(dAtA []byte, offset int, v uint64) int {
	offset -= sovLcp(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *UpdateClientMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProxyMessage)
	if l > 0 {
		n += 1 + l + sovLcp(uint64(l))
	}
	if len(m.Signatures) > 0 {
		for _, b := range m.Signatures {
			l = len(b)
			n += 1 + l + sovLcp(uint64(l))
		}
	}
	return n
}

func (m *RegisterEnclaveKeyMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Report)
	if l > 0 {
		n += 1 + l + sovLcp(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovLcp(uint64(l))
	}
	l = len(m.SigningCert)
	if l > 0 {
		n += 1 + l + sovLcp(uint64(l))
	}
	l = len(m.OperatorSignature)
	if l > 0 {
		n += 1 + l + sovLcp(uint64(l))
	}
	return n
}

func (m *UpdateOperatorsMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nonce != 0 {
		n += 1 + sovLcp(uint64(m.Nonce))
	}
	if len(m.NewOperators) > 0 {
		for _, b := range m.NewOperators {
			l = len(b)
			n += 1 + l + sovLcp(uint64(l))
		}
	}
	if m.NewOperatorsThresholdNumerator != 0 {
		n += 1 + sovLcp(uint64(m.NewOperatorsThresholdNumerator))
	}
	if m.NewOperatorsThresholdDenominator != 0 {
		n += 1 + sovLcp(uint64(m.NewOperatorsThresholdDenominator))
	}
	if len(m.Signatures) > 0 {
		for _, b := range m.Signatures {
			l = len(b)
			n += 1 + l + sovLcp(uint64(l))
		}
	}
	return n
}

func (m *ClientState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Mrenclave)
	if l > 0 {
		n += 1 + l + sovLcp(uint64(l))
	}
	if m.KeyExpiration != 0 {
		n += 1 + sovLcp(uint64(m.KeyExpiration))
	}
	if m.Frozen {
		n += 2
	}
	l = m.LatestHeight.Size()
	n += 1 + l + sovLcp(uint64(l))
	if len(m.AllowedQuoteStatuses) > 0 {
		for _, s := range m.AllowedQuoteStatuses {
			l = len(s)
			n += 1 + l + sovLcp(uint64(l))
		}
	}
	if len(m.AllowedAdvisoryIds) > 0 {
		for _, s := range m.AllowedAdvisoryIds {
			l = len(s)
			n += 1 + l + sovLcp(uint64(l))
		}
	}
	if len(m.Operators) > 0 {
		for _, b := range m.Operators {
			l = len(b)
			n += 1 + l + sovLcp(uint64(l))
		}
	}
	if m.OperatorsNonce != 0 {
		n += 1 + sovLcp(uint64(m.OperatorsNonce))
	}
	if m.OperatorsThresholdNumerator != 0 {
		n += 1 + sovLcp(uint64(m.OperatorsThresholdNumerator))
	}
	if m.OperatorsThresholdDenominator != 0 {
		n += 1 + sovLcp(uint64(m.OperatorsThresholdDenominator))
	}
	return n
}

func (m *ConsensusState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StateId)
	if l > 0 {
		n += 1 + l + sovLcp(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovLcp(uint64(m.Timestamp))
	}
	return n
}

func sovLcp(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLcp(x uint64) (n int) {
	return sovLcp(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UpdateClientMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLcp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateClientMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateClientMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyMessage", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLcp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLcp
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLcp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProxyMessage = append(m.ProxyMessage[:0], dAtA[iNdEx:postIndex]...)
			if m.ProxyMessage == nil {
				m.ProxyMessage = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signatures", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLcp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLcp
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLcp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signatures = append(m.Signatures, make([]byte, postIndex-iNdEx))
			copy(m.Signatures[len(m.Signatures)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLcp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLcp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterEnclaveKeyMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLcp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterEnclaveKeyMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterEnclaveKeyMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Report", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLcp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLcp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLcp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Report = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLcp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLcp
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLcp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SigningCert", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLcp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLcp
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLcp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SigningCert = append(m.SigningCert[:0], dAtA[iNdEx:postIndex]...)
			if m.SigningCert == nil {
				m.SigningCert = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorSignature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLcp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLcp
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLcp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorSignature = append(m.OperatorSignature[:0], dAtA[iNdEx:postIndex]...)
			if m.OperatorSignature == nil {
				m.OperatorSignature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLcp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLcp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateOperatorsMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLcp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateOperatorsMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateOperatorsMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLcp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewOperators", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLcp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLcp
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLcp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewOperators = append(m.NewOperators, make([]byte, postIndex-iNdEx))
			copy(m.NewOperators[len(m.NewOperators)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewOperatorsThresholdNumerator", wireType)
			}
			m.NewOperatorsThresholdNumerator = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLcp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewOperatorsThresholdNumerator |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewOperatorsThresholdDenominator", wireType)
			}
			m.NewOperatorsThresholdDenominator = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLcp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewOperatorsThresholdDenominator |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signatures", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLcp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLcp
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLcp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signatures = append(m.Signatures, make([]byte, postIndex-iNdEx))
			copy(m.Signatures[len(m.Signatures)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLcp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLcp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLcp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mrenclave", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLcp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLcp
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLcp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mrenclave = append(m.Mrenclave[:0], dAtA[iNdEx:postIndex]...)
			if m.Mrenclave == nil {
				m.Mrenclave = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyExpiration", wireType)
			}
			m.KeyExpiration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLcp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyExpiration |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Frozen", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLcp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Frozen = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestHeight", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLcp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLcp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLcp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LatestHeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedQuoteStatuses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLcp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLcp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLcp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllowedQuoteStatuses = append(m.AllowedQuoteStatuses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedAdvisoryIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLcp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLcp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLcp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllowedAdvisoryIds = append(m.AllowedAdvisoryIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operators", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLcp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLcp
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLcp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operators = append(m.Operators, make([]byte, postIndex-iNdEx))
			copy(m.Operators[len(m.Operators)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorsNonce", wireType)
			}
			m.OperatorsNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLcp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperatorsNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorsThresholdNumerator", wireType)
			}
			m.OperatorsThresholdNumerator = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLcp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperatorsThresholdNumerator |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorsThresholdDenominator", wireType)
			}
			m.OperatorsThresholdDenominator = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLcp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperatorsThresholdDenominator |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLcp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLcp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsensusState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLcp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsensusState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsensusState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLcp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLcp
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLcp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateId = append(m.StateId[:0], dAtA[iNdEx:postIndex]...)
			if m.StateId == nil {
				m.StateId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLcp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLcp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLcp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLcp(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLcp
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLcp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLcp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLcp
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLcp
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLcp
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLcp        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLcp          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLcp = fmt.Errorf("proto: unexpected end of group")
)
